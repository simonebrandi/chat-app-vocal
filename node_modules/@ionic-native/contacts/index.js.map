{"version":3,"sources":["../../../src/@ionic-native/plugins/contacts/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import {\n  checkAvailability,\n  CordovaCheck,\n  CordovaInstance,\n  getPromise,\n  InstanceCheck,\n  InstanceProperty,\n  IonicNativePlugin,\n  Plugin\n} from '@ionic-native/core';\n\ndeclare const window: any, navigator: any;\n\nexport type ContactFieldType =\n  | '*'\n  | 'addresses'\n  | 'birthday'\n  | 'categories'\n  | 'country'\n  | 'department'\n  | 'displayName'\n  | 'emails'\n  | 'name.familyName'\n  | 'name.formatted'\n  | 'name.givenName'\n  | 'name.honorificPrefix'\n  | 'name.honorificSuffix'\n  | 'id'\n  | 'ims'\n  | 'locality'\n  | 'name.middleName'\n  | 'name'\n  | 'nickname'\n  | 'note'\n  | 'organizations'\n  | 'phoneNumbers'\n  | 'photos'\n  | 'postalCode'\n  | 'region'\n  | 'streetAddress'\n  | 'title'\n  | 'urls';\n\nexport interface IContactProperties {\n  /** A globally unique identifier. */\n  id?: string;\n\n  /** The name of this Contact, suitable for display to end users. */\n  displayName?: string;\n\n  /** An object containing all components of a persons name. */\n  name?: IContactName;\n\n  /** A casual name by which to address the contact. */\n  nickname?: string;\n\n  /** An array of all the contact's phone numbers. */\n  phoneNumbers?: IContactField[];\n\n  /** An array of all the contact's email addresses. */\n  emails?: IContactField[];\n\n  /** An array of all the contact's addresses. */\n  addresses?: IContactAddress[];\n\n  /** An array of all the contact's IM addresses. */\n  ims?: IContactField[];\n\n  /** An array of all the contact's organizations. */\n  organizations?: IContactOrganization[];\n\n  /** The birthday of the contact. */\n  birthday?: Date;\n\n  /** A note about the contact. */\n  note?: string;\n\n  /** An array of the contact's photos. */\n  photos?: IContactField[];\n\n  /** An array of all the user-defined categories associated with the contact. */\n  categories?: IContactField[];\n\n  /** An array of web pages associated with the contact. */\n  urls?: IContactField[];\n}\n\n/**\n * @hidden\n */\nexport class Contact implements IContactProperties {\n  private _objectInstance: any;\n  @InstanceProperty id: string;\n  @InstanceProperty displayName: string;\n  @InstanceProperty name: IContactName;\n  @InstanceProperty nickname: string;\n  @InstanceProperty phoneNumbers: IContactField[];\n  @InstanceProperty emails: IContactField[];\n  @InstanceProperty addresses: IContactAddress[];\n  @InstanceProperty ims: IContactField[];\n  @InstanceProperty organizations: IContactOrganization[];\n  @InstanceProperty birthday: Date;\n  @InstanceProperty note: string;\n  @InstanceProperty photos: IContactField[];\n  @InstanceProperty categories: IContactField[];\n  @InstanceProperty urls: IContactField[];\n\n  [key: string]: any;\n\n  constructor() {\n    if (\n      checkAvailability('navigator.contacts', 'create', 'Contacts') === true\n    ) {\n      this._objectInstance = navigator.contacts.create();\n    }\n  }\n\n  @InstanceCheck()\n  clone(): Contact {\n    let newContact: any = new Contact();\n    for (let prop in this) {\n      if (prop === 'id') return;\n      newContact[prop] = this[prop];\n    }\n    return newContact;\n  }\n\n  @CordovaInstance()\n  remove(): Promise<any> {\n    return;\n  }\n\n  @InstanceCheck()\n  save(): Promise<any> {\n    return getPromise((resolve: Function, reject: Function) => {\n      this._objectInstance.save((contact: any) => {\n        this._objectInstance = contact;\n        resolve(this);\n      }, reject);\n    });\n  }\n}\n\n/**\n * @hidden\n */\nexport interface IContactError {\n  /** Error code */\n  code: number;\n  /** Error message */\n  message: string;\n}\n\n/**\n * @hidden\n */\nexport declare const ContactError: {\n  new (code: number): IContactError;\n  UNKNOWN_ERROR: number;\n  INVALID_ARGUMENT_ERROR: number;\n  TIMEOUT_ERROR: number;\n  PENDING_OPERATION_ERROR: number;\n  IO_ERROR: number;\n  NOT_SUPPORTED_ERROR: number;\n  PERMISSION_DENIED_ERROR: number;\n};\n\nexport interface IContactName {\n  /** The complete name of the contact. */\n  formatted?: string;\n  /** The contact's family name. */\n  familyName?: string;\n  /** The contact's given name. */\n  givenName?: string;\n  /** The contact's middle name. */\n  middleName?: string;\n  /** The contact's prefix (example Mr. or Dr.) */\n  honorificPrefix?: string;\n  /** The contact's suffix (example Esq.). */\n  honorificSuffix?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactName implements IContactName {\n  constructor(\n    public formatted?: string,\n    public familyName?: string,\n    public givenName?: string,\n    public middleName?: string,\n    public honorificPrefix?: string,\n    public honorificSuffix?: string\n  ) {}\n}\n\nexport interface IContactField {\n  /** A string that indicates what type of field this is, home for example. */\n  type?: string;\n  /** The value of the field, such as a phone number or email address. */\n  value?: string;\n  /** Set to true if this ContactField contains the user's preferred value. */\n  pref?: boolean;\n}\n\n/**\n * @hidden\n */\nexport class ContactField implements IContactField {\n  constructor(\n    public type?: string,\n    public value?: string,\n    public pref?: boolean\n  ) {}\n}\n\nexport interface IContactAddress {\n  /** Set to true if this ContactAddress contains the user's preferred value. */\n  pref?: boolean;\n  /** A string indicating what type of field this is, home for example. */\n  type?: string;\n  /** The full address formatted for display. */\n  formatted?: string;\n  /** The full street address. */\n  streetAddress?: string;\n  /** The city or locality. */\n  locality?: string;\n  /** The state or region. */\n  region?: string;\n  /** The zip code or postal code. */\n  postalCode?: string;\n  /** The country name. */\n  country?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactAddress implements IContactAddress {\n  constructor(\n    public pref?: boolean,\n    public type?: string,\n    public formatted?: string,\n    public streetAddress?: string,\n    public locality?: string,\n    public region?: string,\n    public postalCode?: string,\n    public country?: string\n  ) {}\n}\n\nexport interface IContactOrganization {\n  /** Set to true if this ContactOrganization contains the user's preferred value. */\n  pref?: boolean;\n  /** A string that indicates what type of field this is, home for example. */\n  type?: string;\n  /** The name of the organization. */\n  name?: string;\n  /** The department the contract works for. */\n  department?: string;\n  /** The contact's title at the organization. */\n  title?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactOrganization implements IContactOrganization {\n  constructor(\n    public type?: string,\n    public name?: string,\n    public department?: string,\n    public title?: string,\n    public pref?: boolean\n  ) {}\n}\n\n/** Search options to filter navigator.contacts.  */\nexport interface IContactFindOptions {\n  /** The search string used to find navigator.contacts. */\n  filter?: string;\n  /** Determines if the find operation returns multiple navigator.contacts. Defaults to false. */\n  multiple?: boolean;\n  /** Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields. */\n  desiredFields?: string[];\n  /**\n   * (Android only): Filters the search to only return contacts with a phone number informed.\n   */\n  hasPhoneNumber?: boolean;\n}\n\n/**\n * @hidden\n */\nexport class ContactFindOptions implements IContactFindOptions {\n  constructor(\n    public filter?: string,\n    public multiple?: boolean,\n    public desiredFields?: string[],\n    public hasPhoneNumber?: boolean\n  ) {}\n}\n\n/**\n * @name Contacts\n * @description\n * Access and manage Contacts on the device.\n *\n * @usage\n *\n * ```typescript\n * import { Contacts, Contact, ContactField, ContactName } from '@ionic-native/contacts';\n *\n * constructor(private contacts: Contacts) { }\n *\n * let contact: Contact = this.contacts.create();\n *\n * contact.name = new ContactName(null, 'Smith', 'John');\n * contact.phoneNumbers = [new ContactField('mobile', '6471234567')];\n * contact.save().then(\n *   () => console.log('Contact saved!', contact),\n *   (error: any) => console.error('Error saving contact.', error)\n * );\n *\n * ```\n * @classes\n * Contact\n * @interfaces\n * IContactProperties\n * IContactError\n * IContactName\n * IContactField\n * IContactAddress\n * IContactOrganization\n * IContactFindOptions\n */\n@Plugin({\n  pluginName: 'Contacts',\n  plugin: 'cordova-plugin-contacts',\n  pluginRef: 'navigator.contacts',\n  repo: 'https://github.com/apache/cordova-plugin-contacts',\n  platforms: [\n    'Android',\n    'BlackBerry 10',\n    'Browser',\n    'Firefox OS',\n    'iOS',\n    'Ubuntu',\n    'Windows',\n    'Windows 8',\n    'Windows Phone'\n  ]\n})\nexport class Contacts extends IonicNativePlugin {\n  /**\n   * Create a single contact.\n   * @returns {Contact} Returns a Contact object\n   */\n  create(): Contact {\n    return new Contact();\n  }\n\n  /**\n   * Search for contacts in the Contacts list.\n   * @param {ContactFieldType[]} fields Contact fields to be used as a search qualifier\n   * @param {IContactFindOptions} [options] Optional options for the query\n   * @returns {Promise<Contact[]>} Returns a Promise that resolves with the search results (an array of Contact objects)\n   */\n  @CordovaCheck()\n  find(\n    fields: ContactFieldType[],\n    options?: IContactFindOptions\n  ): Promise<Contact[]> {\n    return getPromise((resolve: Function, reject: Function) => {\n      navigator.contacts.find(\n        fields,\n        (contacts: any[]) => {\n          resolve(contacts.map(processContact));\n        },\n        reject,\n        options\n      );\n    });\n  }\n\n  /**\n   * Select a single Contact.\n   * @returns {Promise<Contact>} Returns a Promise that resolves with the selected Contact\n   */\n  @CordovaCheck()\n  pickContact(): Promise<Contact> {\n    return getPromise((resolve: Function, reject: Function) => {\n      navigator.contacts.pickContact(\n        (contact: any) => resolve(processContact(contact)),\n        reject\n      );\n    });\n  }\n}\n\n/**\n * @hidden\n */\nfunction processContact(contact: any) {\n  let newContact = new Contact();\n  for (let prop in contact) {\n    if (typeof contact[prop] === 'function') continue;\n    newContact[prop] = contact[prop];\n  }\n  return newContact;\n}\n"]}